version: "3.8"

services:
  data-acquisition-service:
    build:
      context: ./data-acquisition-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./data-acquisition-service:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "6000:6000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - NODE_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_URL=amqp://rabbitmq
    command: npm run dev --trace-warnings
    networks:
      - backend-network

  trading-strategy-service:
    build:
      context: ./trading-strategy-service
      dockerfile: Dockerfile.dev
    volumes:
      - ./trading-strategy-service:/app
    ports:
      - "5001:5001"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=tss-cache
      - NODE_ENV=development
      - TSS_RABBITMQ_URL=amqp://rabbitmq
    command: uvicorn app.main:app --host 0.0.0.0 --port 5001 --reload
    networks:
      - backend-network

  # order-execution-service:
  #   build: ./order-execution-service
  #   ports:
  #     - "5002:5002"

  trading-bot-server:
    build: ./trading-bot-server
    ports:
      - "5003:5003"
    volumes:
      - ./trading-bot-server:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run dev
    depends_on:
      - data-acquisition-service
      - trading-strategy-service
      # - order-execution-service

    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=tbs-cache
      - NODE_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - DATA_ACQUISITION_SERVICE_URL=http://data-acquisition-service:5000
    networks:
      - backend-network

  trading-bot-client:
    build: ./trading-bot-client
    volumes:
      - ./trading-bot-client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - trading-bot-server

networks:
  backend-network:
    name: backend-network
    external: true
